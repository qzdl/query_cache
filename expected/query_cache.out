begin transaction;
create extension query_cache;
/* STRUCTURAL TESTS FOR THE EXTENSION
  - check for table structure
  - functions and their parameter signature
*/
select table_name, column_name, data_type from information_schema.columns
where table_schema = 'query_cache' order by table_name, column_name;
      table_name      |    column_name    |          data_type          
----------------------+-------------------+-----------------------------
 cache_invalidation   | cache_id          | bigint
 cache_invalidation   | entity_id         | bigint
 cache_invalidation   | entity_name       | text
 query_cache_metadata | cached_table_name | text
 query_cache_metadata | groupid           | bigint
 query_cache_metadata | id                | integer
 query_cache_metadata | last_updated_ts   | timestamp without time zone
 query_cache_metadata | notes             | jsonb
 query_cache_metadata | pk_constraints    | ARRAY
 query_cache_metadata | sql_original      | text
(10 rows)

SELECT routines.routine_name, parameters.data_type, parameters.ordinal_position
FROM information_schema.routines
    LEFT JOIN information_schema.parameters ON routines.specific_name=parameters.specific_name
WHERE routines.specific_schema='query_cache'
ORDER BY routines.routine_name, parameters.ordinal_position;
             routine_name              | data_type | ordinal_position 
---------------------------------------+-----------+------------------
 cache_query                           | text      |                1
 cache_query                           | bigint    |                2
 cache_query                           | ARRAY     |                3
 cache_query                           | jsonb     |                4
 cache_query                           | text      |                5
 cache_query                           | numeric   |                6
 delete_invalid_cache                  | text      |                1
 delete_invalid_cache                  | bigint    |                2
 get_cached_query                      | text      |                1
 get_cached_query                      | bigint    |                2
 get_cached_query                      | text      |                3
 get_cached_query                      | integer   |                4
 get_cached_query                      | jsonb     |                5
 query_cache_metadata_drop_cache_table |           |                 
 update_cached_query                   | text      |                1
 update_cached_query                   | text      |                2
(16 rows)

select event_object_table as table_name, trigger_schema, trigger_name,
       string_agg(event_manipulation, ',') as event, action_timing,
       action_condition as condition
from information_schema.triggers
where event_object_schema = 'query_cache' group by 1,2,3,5,6 order by table_name;
      table_name      | trigger_schema |               trigger_name               | event  | action_timing | condition 
----------------------+----------------+------------------------------------------+--------+---------------+-----------
 query_cache_metadata | query_cache    | tr_query_cache_metadata_drop_cache_table | DELETE | BEFORE        | 
(1 row)

/* FUNCTIONAL TESTS FOR THE EXTENSION

PREPARATION: create the table that is the table for the query to catch and add an entry

*/
CREATE TABLE data_table( id BIGSERIAL PRIMARY KEY, last_value_ts INTEGER, the_data TEXT);
INSERT INTO data_table(last_value_ts, the_data) VALUES ( 0, 'FIRST');
-- CACHE the data and check if the expected entries are generated
SELECT * FROM query_cache.cache_query('SELECT * FROM data_table', 123,'{id}','{"invalidation": {"department" : [1,2]}}'::JSONB);
NOTICE:  table "cache_1" does not exist, skipping
 new_cached_table_name | v_cnt 
-----------------------+-------
 query_cache.cache_1   |     1
(1 row)

SELECT cached_table_name FROM query_cache.get_cached_query('SELECT * FROM data_table', 123);
  cached_table_name  
---------------------
 query_cache.cache_1
(1 row)

SELECT COUNT(*)::INT FROM query_cache.cache_1;
 count 
-------
     1
(1 row)

SELECT COUNT(*) FROM query_cache.cache_invalidation WHERE entity_name = 'department';
 count 
-------
     2
(1 row)

SELECT * FROM query_cache.cache_query('SELECT * FROM data_table', 123,'{id}','{"invalidation": {"department" : [1,2,3]}}'::JSONB);
NOTICE:  table "cache_1" does not exist, skipping
 new_cached_table_name | v_cnt 
-----------------------+-------
 query_cache.cache_1   |     1
(1 row)

-- add a new entry with higher TS in the data_table and check the cached table if the entry is added.
INSERT INTO data_table(last_value_ts, the_data) VALUES ( 3600 ,'SECOND');
SELECT * FROM query_cache.update_cached_query('SELECT * FROM data_table WHERE last_value_ts > 0','query_cache.cache_1');
 update_cached_query 
---------------------
                   1
(1 row)

SELECT c.id cache_id, c.last_value_ts cache_ts,c.the_data cache_value,
       d.id data_id,d.last_value_ts data_ts,d.the_data data_value
  FROM query_cache.cache_1 c FULL OUTER JOIN data_table d ON c.id = d.id ORDER BY d.id;
 cache_id | cache_ts | cache_value | data_id | data_ts | data_value 
----------+----------+-------------+---------+---------+------------
        1 |        0 | FIRST       |       1 |       0 | FIRST
        2 |     3600 | SECOND      |       2 |    3600 | SECOND
(2 rows)

-- INVALIDATION
SELECT * FROM query_cache.delete_invalid_cache('department',1::BIGINT);
NOTICE:  Dropping table query_cache.cache_1
NOTICE:  table "cache_1" does not exist, skipping
 delete_invalid_cache 
----------------------
 
(1 row)

-- after invalidation neither the cache_1 cached table, nor a corresponding entry in the cache_invalidation table,
-- nor the entry in the query_cache_metadata exists anymore.
SELECT table_name FROM information_schema.tables WHERE table_schema = 'query_cache' AND table_name = 'cache_1';
 table_name 
------------
(0 rows)

SELECT COUNT(*) FROM query_cache.cache_invalidation WHERE entity_name = 'department';
 count 
-------
     0
(1 row)

SELECT COUNT(*) FROM query_cache.get_cached_query('SELECT * FROM data_table', 123);
 count 
-------
     0
(1 row)

-- test if multi column pk parameter is correctly handled
SELECT * FROM query_cache.cache_query(
  'SELECT * FROM data_table', 123,'{id,last_value_ts}','{"invalidation": {"department" : [1,2,3]}}'::JSONB);
NOTICE:  table "cache_2" does not exist, skipping
 new_cached_table_name | v_cnt 
-----------------------+-------
 query_cache.cache_2   |     2
(1 row)

-- CLEAN UP
drop extension query_cache cascade;
rollback;
